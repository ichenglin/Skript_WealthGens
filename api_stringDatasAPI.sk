function stringDatasAPI_setData(newDataName: text, newDataValue: text, oldData: text = "") :: text:
	replace all "[" with "_" in {_newDataName}
	set {_convertedDataString} to stringDatasAPI_system_convertString({_newDataValue})
	if {_oldData} is not set:
		return "%{_newDataName}%[%{_convertedDataString}%]"
	else if {_oldData} is "":
		return "%{_newDataName}%[%{_convertedDataString}%]"
	else:
		set {_oldDataSplit::*} to stringDatasAPI_system_splitDatas({_oldData}, ":")
		loop (amount of {_oldDataSplit::*}) times:
			set {_loopDataSplit::*} to {_oldDataSplit::%loop-number%} split by "["
			if {_loopDataSplit::1} is {_newDataName}:
				delete {_oldDataSplit::%loop-number%}
		add "%{_newDataName}%[%{_convertedDataString}%]" to {_oldDataSplit::*}
		set {_removedNameString} to join {_oldDataSplit::*} with delimiter ":"
		return {_removedNameString}

function stringDatasAPI_removeData(dataString: text, dataName: text) :: text:
	set {_oldDataSplit::*} to stringDatasAPI_system_splitDatas({_dataString}, ":")
	loop (amount of {_oldDataSplit::*}) times:
		set {_loopDataSplit::*} to {_oldDataSplit::%loop-number%} split by "["
		if {_loopDataSplit::1} is {_dataName}:
			delete {_oldDataSplit::%loop-number%}
			exit 1 loop
	if (amount of {_oldDataSplit::*}) <= 0:
		return ""
	set {_newDataString} to join {_oldDataSplit::*} with delimiter ":"
	return {_newDataString}

function stringDatasAPI_getData(dataString: text, dataName: text) :: text:
	set {_oldDataSplit::*} to stringDatasAPI_system_splitDatas({_dataString}, ":")
	loop (amount of {_oldDataSplit::*}) times:
		set {_loopDataSplit::*} to {_oldDataSplit::%loop-number%} split by "["
		if {_loopDataSplit::1} is {_dataName}:
			delete {_loopDataSplit::1}
			set {_rawReturn} to join {_loopDataSplit::*} with delimiter "["
	set {_split::*} to {_rawReturn} split by ""
	set {_deleteCharNumber} to ((amount of {_split::*}) - 1)
	delete {_split::%{_deleteCharNumber}%}
	set {_dataValue} to join {_split::*} with ""
	return stringDatasAPI_system_translateString({_dataValue})

function stringDatasAPI_isSet(dataString: text, dataName: text) :: boolean:
	set {_oldDataSplit::*} to stringDatasAPI_system_splitDatas({_dataString}, ":")
	loop (amount of {_oldDataSplit::*}) times:
		set {_loopDataSplit::*} to {_oldDataSplit::%loop-number%} split by "["
		if {_loopDataSplit::1} is {_dataName}:
			return true
	return false

function stringDatasAPI_getDataNames(dataString: text) :: texts:
	set {_oldDataSplit::*} to stringDatasAPI_system_splitDatas({_dataString}, ":")
	loop (amount of {_oldDataSplit::*}) times:
		set {_loopDataSplit::*} to {_oldDataSplit::%loop-number%} split by "["
		add {_loopDataSplit::1} to {_returnNames::*}
	return {_returnNames::*}

function stringDatasAPI_system_convertString(text: text) :: text:
	set {_stringSplit::*} to {_text} split by ""
	loop {_stringSplit::*}:
		if stringDatasAPI_system_checkIllegalCharacters({_stringSplit::%loop-index%}) is true:
			set {_stringSplit::%loop-index%} to "\%{_stringSplit::%loop-index%}%"
	set {_final} to join {_stringSplit::*} with ""
	return {_final}

function stringDatasAPI_system_translateString(text: text) :: text:
	set {_stringSplit::*} to {_text} split by ""
	set {_loopNumber} to 0
	set {_loopTimes} to (amount of {_stringSplit::*})
	while {_loopNumber} <= {_loopTimes}:
		add 1 to {_loopNumber}
		set {_nextLoopNumber} to ({_loopNumber} + 1)
		set {_illegalCharCheck} to true
		if {_stringSplit::%{_loopNumber}%} is not "\":
			set {_illegalCharCheck} to false
		else if stringDatasAPI_system_checkIllegalCharacters({_stringSplit::%{_nextLoopNumber}%}) is false:
			set {_illegalCharCheck} to false
		if {_illegalCharCheck} is true:
			delete {_stringSplit::%{_loopNumber}%}
			add 1 to {_loopNumber}
	set {_final} to join {_stringSplit::*} with ""
	return {_final}

function stringDatasAPI_system_splitDatas(dataText: text, splitChar: text, removeCharAfter: boolean = false) :: texts:
	set {_dataTextSplit::*} to {_dataText} split by ""
	set {_splitString} to ""
	loop (amount of {_dataTextSplit::*}) times:
		set {_isSplit} to true
		set {_lastSplitNumber} to (loop-number - 1)
		if {_dataTextSplit::%loop-number%} is not {_splitChar}:
			set {_isSplit} to false
		else if {_dataTextSplit::%{_lastSplitNumber}%} is "\":
			set {_isSplit} to false
		if {_isSplit} is true:
			add {_splitString} to {_returnTexts::*}
			set {_splitString} to ""
			if {_removeCharAfter} is true:
				set {_ignoreNextChar} to true
		else:
			if {_ignoreNextChar} is true:
				set {_ignoreNextChar} to false
			else:
				set {_splitString} to "%{_splitString}%%{_dataTextSplit::%loop-number%}%"
	add {_splitString} to {_returnTexts::*} 
	return {_returnTexts::*}

function stringDatasAPI_system_checkIllegalCharacters(text: text) :: boolean:
	set {_text} to regex replace all pattern "[a-z,A-Z,0-9]" with "" in {_text}
	if {_text} is "":
		return false
	return true