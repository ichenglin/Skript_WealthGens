on script load:
	delete {-game_displayHandler::*}

function game_displayHandler_getNumberDigitDisplay(number: number) :: text:
	set {_numberText} to "%{_number}%"
	set {_numberTextDigits::*} to {_numberText} split by ""
	set {_numberTextDigitAmount} to ((amount of {_numberTextDigits::*}) - 1)
	set {_delimiterAmount} to floor(({_numberTextDigitAmount} - 1) / 3)
	set {_numberDisplay} to ""
	loop {_numberTextDigitAmount} times:
		set {_loopDigit} to ({_numberTextDigitAmount} - loop-number + 1)
		if loop-number is 1:
			set {_numberDisplay} to "%{_numberTextDigits::%{_loopDigit}%}%%{_numberDisplay}%"
		else if ((loop-number - 1) / 3) is floor((loop-number - 1) / 3):
			set {_numberDisplay} to "%{_numberTextDigits::%{_loopDigit}%}%,%{_numberDisplay}%"
		else:
			set {_numberDisplay} to "%{_numberTextDigits::%{_loopDigit}%}%%{_numberDisplay}%"
	return {_numberDisplay}

function game_displayHandler_getNumberSimplifiedDisplay(number: number) :: text:
	set {_simplifiedUnit::*} to "" and "K" and "M" and "B" and "T" and "Qa" and "Qi" and "Sx" and "Sp" and "Oc" and "No" and "Dc" and "Ud" and "Dd" and "Td" and "Qad" and "Qid" and "Sxd" and "Spd" and "Ocd" and "Nod" and "Vg" and "Uvg"
	loop (amount of {_simplifiedUnit::*}) times:
		if {_number} < (1000 ^ loop-number):
			set {_selectedUnit} to loop-number
			exit 1 loop
	return "%({_number} / (1000 ^ ({_selectedUnit} - 1)))%%{_simplifiedUnit::%{_selectedUnit}%}%"

function game_displayHandler_secondsToTime(seconds: number) :: text:
	add "S" and "M" and "H" and "D" and "W" to {_units::*}
	add "Seconds" and "Minutes" and "Hours" and "Days" and "Weeks" to {_unitNames::*}
	set {_secondsPerUnit::S} to 1
	set {_secondsPerUnit::M} to 60
	set {_secondsPerUnit::H} to 3600
	set {_secondsPerUnit::D} to 86400
	set {_secondsPerUnit::W} to 604800
	loop 6 times:
		set {_displayUnitNumber} to (loop-number - 1)
		if {_seconds} < {_secondsPerUnit::%{_units::%loop-number%}%}:
			exit 1 loop
	set {_displayUnitNumber} to (check [{_displayUnitNumber} > 0] ? {_displayUnitNumber} : 1)
	return "%({_seconds} / {_secondsPerUnit::%{_units::%{_displayUnitNumber}%}%})% %{_unitNames::%{_displayUnitNumber}%}%"

function game_displayHandler_secondsToCountdown(seconds: number) :: text:
	set {_minutes} to floor({_seconds} / 60)
	set {_seconds} to mod({_seconds}, 60)
	set {_minutesDisplay} to (check [{_minutes} >= 10] ? "%{_minutes}%" : "0%{_minutes}%")
	set {_secondsDisplay} to (check [{_seconds} >= 10] ? "%{_seconds}%" : "0%{_seconds}%")
	return "%{_minutesDisplay}%:%{_secondsDisplay}%"

function game_displayHandler_rawItemTypeLabel(item: item) :: item:
	set {_itemName} to "%{_item}'s type%"
	set {_item}'s name to "&e%game_displayHandler_itemIdTextToName({_itemName})%"
	if {_item} is solid:
		set {_item}'s lore to "||&eType: &fBlock"
	else if (id of {_item}'s type) < 256:
		set {_item}'s lore to "||&eType: &fBlock"
	else if (id of {_item}'s type) is 323 or 324 or 330 or 354 or 355 or 379 or 380 or 427 or 428 or 429 or 430 or 431:
		set {_item}'s lore to "||&eType: &fBlock"
	else:
		set {_item}'s lore to "||&eType: &fMaterial"
	return {_item}

function game_displayHandler_itemIdTextToName(itemIdText: text) :: text:
	if {-game_displayHandler::ITEM_ID_DISPLAY_%{_itemIdText}%} is not set:
		set {_displayIdText} to {_itemIdText}
		replace all "_" with " " in {_displayIdText}
		replace all "INACTIVE " with "" in {_displayIdText}
		replace all "NON-BURNING " with "" in {_displayIdText}
		replace all " ITEM" with "" in {_displayIdText}
		replace all " ON" with "" in {_displayIdText}
		replace all " BASE" with "" in {_displayIdText}
		replace all " BLOCK" with "" in {_displayIdText}
		set {-game_displayHandler::ITEM_ID_DISPLAY_%{_itemIdText}%} to {_displayIdText}
	return game_displayHandler_uppercaseLeadingLetter({-game_displayHandler::ITEM_ID_DISPLAY_%{_itemIdText}%})

function game_displayHandler_uppercaseLeadingLetter(text: text) :: text:
	set {_textSplit::*} to {_text} split by ""
	loop (amount of {_textSplit::*}) times:
		if loop-number is 1:
			set {_textSplit::%loop-number%} to {_textSplit::%loop-number%} in upper case
		else if {_textSplit::%(loop-number - 1)%} is " ":
			set {_textSplit::%loop-number%} to {_textSplit::%loop-number%} in upper case
		else:
			set {_textSplit::%loop-number%} to {_textSplit::%loop-number%} in lower case
	set {_textFinal} to join {_textSplit::*} with delimiter ""
	return {_textFinal}

function game_displayHandler_checkAlphanumeric(text: text) :: boolean:
	set {_text} to regex replace all pattern "[a-z,A-Z,0-9]" with "" in {_text}
	replace all " " with "" in {_text}
	if {_text} is "":
		return true
	return false